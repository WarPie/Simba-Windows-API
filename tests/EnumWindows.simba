program new;
{$I Windows/Windows.simba}

type
  TSysProcEx = record
    Handle: HWND;
    PID: DWord;
    Bounds: TRect;
    Title: WideString;
  end;
  TSysProcExArr = array of TSysProcEx;

function IsRealWindow(handle:HWND): Boolean;
var
  hasOwner:Boolean;
  exStyle:UInt32;
begin
  Result := False;
  if not User32.IsWindowVisible(handle) then
    Exit(False);
  if User32.GetParent(handle) <> 0 then
    Exit(True);
  hasOwner := User32.GetWindow(handle, GW_OWNER) <> 0;
  exStyle := User32.GetWindowLong(handle, GWL_EXSTYLE);
  if ((exStyle and WS_EX_TOOLWINDOW = 0) and (not hasOwner)) or
     ((exStyle and WS_EX_APPWINDOW <> 0) and (hasOwner)) then
    Result := True;
end;

function GetVisibleWindows(): TSysProcExArr;
  function EnumProcess(Handle: HWND; Param: Pointer): LongBool; static;
  var
    Res:^TSysProcExArr := Param;
    i:Int32;
  begin
    if IsRealWindow(Handle) then
    begin
      i := Length(Res^);
      SetLength(Res^, i+1);
      Res^[i].Handle := Handle;
      Res^[i].Bounds := User32.GetWindowRect(Handle);
      User32.GetWindowThreadProcessId(Handle, Res^[i].PID);
      Res^[i].Title := User32.GetWindowText(Handle);
    end;
    Result := True;
  end;
begin
  Windows.EnumWindows(@EnumProcess, @Result);
end;


function ToString(x:TSysProcEx): String; override;
begin
  Result := '[';
  Result += '$'+IntToHex(x.Handle,8) + ', ' + Format('%.6d',[x.PID]) + ', ';
  Result += #39 + x.Title + #39+', ';
  Result += '(';
  Result += ToString(x.Bounds.Left) + ', ' + ToString(x.Bounds.Top) + ', '
         +  ToString(x.Bounds.Right) + ', '+ ToString(x.Bounds.Bottom) + ')';
  Result += ']';
end;

var
  proc:TSysProcEx;
begin
  for proc in GetVisibleWindows() do
    WriteLn(proc);
end.



